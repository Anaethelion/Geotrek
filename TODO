* Check form non field error


==============
Known problems
==============

* ``dumpdata`` management command will not output the Z coordinates when
  present. Chaining dumpdata and loaddata will therefore not work.
* If map view is to wide, no background layer is displayed (c.f. WMS écrins)
* Breakpoints on onLayerAdd and onLayerRemove triggered twice at page load which
  seems to indicate that some layers (or features?) are unecessarily loaded. To
  further investigated.
* mapentity/widgets.py does too much. Should not transform data. If 'abc' is submitted in
  parking location field, error is silent.
* Something is wrong with logger configuration, nothing in logs in production for authenbackend failure

==========
Soon...
==========

* Refactor wkt_to_geom, transform_wkt, move to widgets

* Refactor Topology.overlapping() : should not receive queryset

* Should not be necessary to call "existing()" on each manager

* Split and simplify formfield.js

* Release Leaflet.measure

* Set ON DELETE on tables https://docs.djangoproject.com/en/1.4/ref/models/fields/#django.db.models.ForeignKey.on_delete

* Make application optional (ex: remove dependancies from core)

* Make mapentity generic : no notion of Geotrek (remove common/settings, split formfield)

* Put bbox only once (4326 = human readable, usual form, cf. docs écrins)

* Split django-floppyforms-leaflet

* Django model translations : default language to avoid excluding form fields ? Auto-add all fields
  for all declared languages ?

* Switch to django-bootstrapped instead of embedding it

* Use localstorage instead of Django sessions for navigation history and last search

* Use search_path ALTER USER toto SET search_path = toto, public;  ou db_table = 'schema\".\"tablename'

* Manager Mixins django-qmixin / django-qmanager
* django-crud
* refactor nodelete
* refactor permissions
* django - computed field 

* Refactor Shapefile and CSV export. Especially for serializing strings, FK and M2M...

==========
One day...
==========


* Idea ? Process .sql files with template engine. Provide small tags 
  like {% table Path %} {% field Path.geom %}.
  This would prevent from having hard-coded tablenames.
  SELECT {% field Path.name %} FROM {% table Path %}

* Docstrings for each model

* Fields computed at DB-level should be read-only for Django. (Standard
  models.Model.save() method will insert/update all non-PK fields).
* See how django manage an instance being a parent of two different child
  instance in the case of multi-table inheritance. Could it be troublesome?
* When changing ``dim`` parameter on a GeometryField, South does not alter nor
  drop/create the field
